#!/usr/bin/env python

from __future__ import absolute_import



from celeros import config
from celeros.rosstart import BootRostfulNode
from celery import Celery
from celery.bin import Option

import click
import logging
import sys
import threading

@click.command()
@click.option('-b', '--broker-url', default='redis://localhost:6379')  # by default use config module value
@click.option('-t', '--worker-tasks', default='celeros.tasks')  # by default use config module value
@click.option('ros_args', '-r', '--ros-arg', multiple=True, default='')
def main(broker_url='', worker_tasks='', ros_args=[]):
    celeros_app = Celery()
    celeros_app.steps['worker'].add(BootRostfulNode)
    celeros_app.user_options['worker'].add(Option('-R', '--ros-args', default=None, help='Arguments for ros initialisation'))
    celeros_app.config_from_object(config.Development)
    
    logging.info('broker %s tasks %s', broker_url, worker_tasks)
    logging.info('ros_args %s', ros_args)
    str_rosargs = ','.join([str(arg) for arg in ros_args]) # remove unicode designation in strings

    # changing broker ( needed even without worker running here )
    if broker_url != '':
        celeros_app.conf.update(
            CELERY_BROKER_URL=broker_url,
            CELERY_RESULT_BACKEND=broker_url,
        )

    # importing extra tasks ( needed even without worker running here )
    if worker_tasks != '':
        celeros_app.conf.update(CELERY_IMPORTS=worker_tasks)
    
    worker_thread = threading.Thread(
        target=celeros_app.worker_main,
        kwargs={'argv': [
            'celery',
            # '--app=celery',
            # '--config=celery_cfg.Development',
            '--events',
            '--loglevel=INFO',
            '--broker=' + broker_url,
            '--concurrency=1',
            '--autoreload',  # not working ??
            '--ros-args=' + str_rosargs
        ]})

    worker_thread.start()
    worker_thread.join()

if __name__ == '__main__':
    # change the ros arguments into a format readable by click
    sys.argv = map(lambda x : '--ros-arg=' + x if x[0:2] == '__' else x, sys.argv)
    main()
